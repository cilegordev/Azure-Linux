From 720cec7b60777c63c5683fb7d24dc442853f2c35 Mon Sep 17 00:00:00 2001
From: Pablo Neira Ayuso <pablo@netfilter.org>
Date: Thu, 13 Feb 2020 13:27:18 +0100
Subject: [PATCH] scanner: use list_is_first() from scanner_pop_indesc()

!list_empty() always stands true since the list is never empty
when calling scanner_pop_indesc().

Check for list_is_first() which actually tells us this is the
initial input file, hence, state->indesc is set to NULL.

Signed-off-by: Pablo Neira Ayuso <pablo@netfilter.org>
(cherry picked from commit f391fdd8e0fbaf3749819cfa0cd9b478f3630a7d)
Signed-off-by: Phil Sutter <psutter@redhat.com>
---
 include/list.h | 11 +++++++++++
 src/scanner.l  |  2 +-
 2 files changed, 12 insertions(+), 1 deletion(-)

diff --git a/include/list.h b/include/list.h
index 75d2921240101..9c4da81749ded 100644
--- a/include/list.h
+++ b/include/list.h
@@ -33,6 +33,17 @@ static inline void init_list_head(struct list_head *list)
 	list->prev = list;
 }
 
+/**
+ * list_is_first -- tests whether @list is the first entry in list @head
+ * @list: the entry to test
+ * @head: the head of the list
+ */
+static inline int list_is_first(const struct list_head *list,
+				const struct list_head *head)
+{
+	return list->prev == head;
+}
+
 /*
  * Insert a new entry between two known consecutive entries.
  *
diff --git a/src/scanner.l b/src/scanner.l
index b0545a9a63f30..d4d816fe66972 100644
--- a/src/scanner.l
+++ b/src/scanner.l
@@ -677,7 +677,7 @@ static void scanner_push_indesc(struct parser_state *state,
 
 static void scanner_pop_indesc(struct parser_state *state)
 {
-	if (!list_empty(&state->indesc_list)) {
+	if (!list_is_first(&state->indesc->list, &state->indesc_list)) {
 		state->indesc = list_entry(state->indesc->list.prev,
 					   struct input_descriptor, list);
 	} else {
-- 
2.28.0

